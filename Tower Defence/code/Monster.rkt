(#%require (only racket/base random))

(define (make-monster type position)
  (let ((tile (make-tile image-size image-size red-monster-img red-monster-mask))
        (health 1)
        (angle 0)
        (speed 2)
        (default-speed 2)
        (damage 1)
        (last-path-position '())
        (on-hit '())
        (random-event '())
        (on-death '())
        (infection #f) ;Eather false or a cooldown number
        (points 30)
        (passsed-obstacles '())
        (area '()))
    
    (case type ;If red is chosen then no option is selected, then we use the default values
      ("Blue" (begin
                (set! health 3)
                (set! speed health)
                (set! default-speed 3)
                (set! damage 2)
                (set! points 50)
                (set! tile (make-tile image-size image-size blue-monster-img blue-monster-mask))
                (set! on-hit (lambda () (if (eq? health 1)
                                            (set! speed 1))))))
    
      ("Gray" (begin
                (set! health 3)
                (set! damage 2)
                (set! points 60)
                (set! tile (make-tile image-size image-size gray-monster-img gray-monster-mask))
                (set! random-event (lambda ()
                                     (if (not infection)
                                         (begin (display "Change")
                                                (cond ((eq? speed 1) (set! speed (+ speed (random 0 3))))
                                                      ((eq? speed 3) (set! speed (+ speed (random -2 1))))
                                                      (else (set! speed (+ speed (random -1 2)))))))))))
      
      ("Purple" (begin
                  (set! health 4)
                  (set! damage 3)
                  (set! points 60)
                  (set! tile (make-tile image-size image-size purple-monster-img purple-monster-mask))
                  (set! on-death (lambda (monsters next-pos)
                                   (map (lambda (monster)
                                          (if (not (equal? (monster 'get-type) "Purple"))
                                              (if ((position 'in-area?) (monster 'get-position) 3)
                                                  ((monster 'set-health!) (+ (monster 'get-health) 1)))))
                                        monsters))))))
  
  
    (define (set-scale!)
      ((tile 'set-scale!) size-factor)

      ((tile 'set-x!) (+ (- (/ (* (tile 'get-w) size-factor) 2) (/ (tile 'get-w) 2)) (position 'get-x)))
      ((tile 'set-y!) (+ (- (/ (* (tile 'get-h) size-factor) 2) (/ (tile 'get-h) 2)) (position 'get-y))))

    (define (endpoint?)
      ((position 'close-enough?) end-position))

    (define (set-next-position!)
      ((position 'change-coordinates!) (round (+ (position 'get-x) (* speed (cos angle)))) (round (+ (position 'get-y) (* speed (sin angle))))))

    (define (hit! damage)
      (set-health! (- health damage))
      (if (not (null? on-hit))
          (on-hit)))

    (define (set-angle! value)
      (set! angle value))

    (define (set-position! pos)
      (set! position pos))

    (define (set-last-path-position! position)
      (set! last-path-position position))

    (define (set-health! value)
      (set! health value))

    (define (set-speed! value)
      (set! speed value))

    (define (set-infection! value)
      (set! infection value))

    (define (add-passed-obstacle! obstacle)
      (if (null? passsed-obstacles)
          (set! passed-obstacles (list obstacle))
          (set! passed-obstacles (append passed-obstacles (list obstacle)))))
    
    (define (dispatch mes)
      (cond ((eq? mes 'get-position) position)
            ((eq? mes 'set-position!) set-position!)
            ((eq? mes 'get-tile) tile)
            ((eq? mes 'get-increment-x) increment-x)
            ((eq? mes 'get-increment-y) increment-y)
            ((eq? mes 'set-increment!) set-increment!)
            ((eq? mes 'endpoint?) endpoint?)
            ((eq? mes 'entity?) 'monster)
            ((eq? mes 'set-next-position!) (set-next-position!))
            ((eq? mes 'get-health) health)
            ((eq? mes 'set-angle!) set-angle!)
            ((eq? mes 'get-angle) angle)
            ((eq? mes 'get-speed) speed)
            ((eq? mes 'hit!) hit!)
            ((eq? mes 'set-last-path-position!) set-last-path-position!)
            ((eq? mes 'get-last-path-position) last-path-position)
            ((eq? mes 'get-random-event) random-event)
            ((eq? mes 'on-death) on-death)
            ((eq? mes 'set-health!) set-health!)
            ((eq? mes 'get-type) type)
            ((eq? mes 'get-damage) damage)
            ((eq? mes 'set-speed!) set-speed!)
            ((eq? mes 'set-infection!) set-infection!)
            ((eq? mes 'get-infection) infection)
            ((eq? mes 'get-default-speed) default-speed)
            ((eq? mes 'get-points) points)
            ((eq? mes 'add-passed-obstacle!) add-passed-obstacle!)
            ((eq? mes 'get-passed-obstacles) passsed-obstacles)))
    (set-scale!)
    ((position 'set-distance-num!) 5)
    dispatch))