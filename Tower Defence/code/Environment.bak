(load "Monster.rkt")

(define (make-environment draw path)

  (let ((monsters '())
         (towers '()))
    
    (define (add-entity! entity)
      (cond ((eq? (entity 'entity?) 'monster) ;If the entity is equal to a monster
             (if (null? monsters)
                 (set! monsters (list entity))
                 (set! monsters (append monsters (list entity))))
             (draw-entity! entity))
            ((eq? (entity 'entity?) 'tower)
             (if (and (free-position? entity) (not (on-path? entity)))
                 (begin (if (null? towers)
                            (set! towers (list entity))
                            (set! towers (append towers (list entity))))
                        (draw-entity! entity))
                 (display "Unable to place tower at this position")))))

    (define (draw-entity! entity)
      ((draw 'draw!) (entity 'get-tile)))
  
    (define (move-monster! monster)
      (monster 'set-next-position!)
      ((draw 'reposition!) monster (monster 'get-position)))

    (define (remove-monster! monster)
      (define (remove list)
        (if (null? list)
            '()
            (if ((((car list) 'get-position) 'equal?) (monster 'get-position))
                (remove (cdr list))
                (cons (car list) (remove (cdr list))))))
      (set! monsters (remove monsters))
      (((draw 'entity-layer) 'remove-drawable!) (monster 'get-tile)))
  
    (define (set-new-increment! monster)
      (map (lambda (position)
             (if ((monster 'endpoint?))
                 (remove-monster! monster)
                 (if (((monster 'get-position) 'in-area?) (car position))
                     ((monster 'set-increment!) ((cdr position) 'get-x) ((cdr position) 'get-y)))))
           (path 'path-positions)))
  
    (define (monsters-loop)
      (map (lambda (monster)
             (if (<= (monster 'get-health) 0)
                 (remove-monster! monster)
                 (begin
                   (set-new-increment! monster)
                   (move-monster! monster))))
           monsters))

    (define (free-position? tower)
      (let loop ((lijst towers))
        (cond ((null? lijst) #t)
              ((or ((((car lijst) 'get-position) 'equal?) (tower 'get-position)) (on-path? tower)) #f)
              (else (loop (cdr lijst))))))
  
    (define (on-path? tower)
      (let loop ((lijst (path 'path-positions))
                 (tow-pos (tower 'get-position)))
        (cond ((null? (cdr lijst)) #f)
              ((and (= (tow-pos 'get-x) ((caar lijst) 'get-x)) (= (tow-pos 'get-x) ((caadr lijst) 'get-x)))
               (and (>= (tow-pos 'get-y) ((caar lijst) 'get-y)) (<= (tow-pos 'get-y) ((caadr lijst) 'get-y))))
              ((and (= (tow-pos 'get-y) ((caar lijst) 'get-y)) (= (tow-pos 'get-y) ((caadr lijst) 'get-y)))
               (and (>= (tow-pos 'get-x) ((caar lijst) 'get-x)) (<= (tow-pos 'get-x) ((caadr lijst) 'get-x))))
              (else (loop (cdr lijst) tow-pos)))))

    (define (towers-loop ms)
      (map (lambda (tower)
             (calculate-cooldown tower ms)
             (check-tower-areas tower)
             (towers-shoot tower))
           towers))

    (define (towers-shoot tower)
      ((tower 'shoot!)))
  
    (define (check-tower-areas tower)
      (map (lambda (monster)
             ((tower 'check-area) monster))
           monsters))

    (define (calculate-cooldown tower ms)
      (if (not (= (tower 'cooldown) 0))
          (if (> 0 (- (tower 'cooldown) ms))
              ((tower 'set-cooldown!) 0)
              ((tower 'set-cooldown!) (- (tower 'cooldown) ms)))))
  
    (define (dispatch mes)
      (cond ((eq? mes 'draw) draw)
            ((eq? mes 'get-monsters) monsters)
            ((eq? mes 'get-path) path)
            ((eq? mes 'add-entity!) add-entity!)
            ((eq? mes 'get-monsters) monsters)
            ((eq? mes 'monsters-loop) monsters-loop)
            ((eq? mes 'check-tower-areas) check-tower-areas)
            ((eq? mes 'on-path?) on-path?)
            ((eq? mes 'towers-loop) towers-loop)
            (else (display "Error: Wrong dispatch message (Environment.rkt) -> ") (display mes))))
    dispatch))