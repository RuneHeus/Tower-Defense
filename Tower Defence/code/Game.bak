(load "Constants.rkt")
(load "Tower.rkt")
(load "Monster.rkt")

(define (make-game environment wave)

  (let ((monster-spawn-time 0)
         (monster-move-time 0))
  
    (define (start!) ;Calls all the necessary procedures to start the game
;      (clean!)
      (load-world!)
      ((wave 'load-wave!))
      (game-loop))

    (define (clean!)
      (display "Clean!")) ;Resets all the environment variables and lists

    (define (stop!)
      (Display "Stop!")) ;Stops the game

    (define (game-loop) ;This starts the game loop

      ((((environment 'draw) 'get-window) 'set-update-callback!)
       (lambda (ms)
         (set! monster-spawn-time (+ monster-spawn-time ms))
         (set! monster-move-time (+ monster-move-time ms)); Add the extra elapsed time to time-elapsed
         (time-handler ms))) ;Call the time handler to trigger event on certain elapsed time

      ((((environment 'draw) 'get-window) 'set-mouse-click-callback!) ;Reacts and acts upon mouse clicks
       (lambda (button status x y)
         (if (and (eq? button 'left)
                  (eq? status 'pressed))
             (let ((tower (make-tower (make-position (- x (- (modulo x (ceiling (* size-factor 50))) (- (ceiling (* size-factor 50)) (* size-factor 50)))) (- y (- (modulo y (ceiling (* size-factor 50))) (- (ceiling (* size-factor 50)) (* size-factor 50))))) environment)))
               ((environment 'add-entity!) tower))))))
  
    (define (load-world!)
      ((environment 'draw) 'draw-world!)) ;Call draw-world! from Draw ADT

    (define (time-handler ms)
      (if (>= monster-spawn-time 500)
          (begin (set! monster-spawn-time 0)
                 ((wave 'next-monster!))))
      (if (>= monster-move-time 10) ;Only move monster each 10 ms, so that it runs sort of even on every computer
          (begin (set! monster-move-time 0)
                 ((environment 'monsters-loop))
                 ((environment 'towers-loop) ms))))
  
    (define (dispatch mes)
      (cond ((eq? mes 'start!) (start!))
            ((eq? mes 'clean!) clean!)
            ((eq? mes 'stop!) stop!)
            ((eq? mes 'load-world!) (load-world!))
            (else (display "Error: Wrong dispatch message (Game.rkt): ") (display mes))))
    dispatch))