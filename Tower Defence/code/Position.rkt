(define (make-position xCoordinate yCoordinate)

  (let ((x xCoordinate)
        (y yCoordinate)
        (distance-num 15))
    
    (define (set-x! num)
      (set! x num))

    (define (set-y! num)
      (set! y num))

    (define (equal? position)
      (and (= x (position 'get-x)) (= y (position 'get-y))))

    (define (in-area? entity-pos range)
      (and
       (and (>= (entity-pos 'get-x) (- x (* 50 range))) (>= (entity-pos 'get-y) (- y (* 50 range))))
       (and (<= (entity-pos 'get-x) (+ x (* 50 range))) (<= (entity-pos 'get-y) (+ y (* 50 range))))))

    (define (change-coordinates! num1 num2)
      (set! x num1)
      (set! y num2))

    (define (close-enough? target-pos . mes)
      (let ((distance (+ (expt (- (target-pos 'get-x) x) 2) (expt (- (target-pos 'get-y) y) 2))))
        (< distance distance-num)))

    (define (outside-playarea? area-pos-x area-pos-y)
      (or (> x area-pos-x) (> y area-pos-y) (< x 0) (< y 0)))

    (define (set-distance-num! num)
      (set! distance-num num))

    (define (calculate-distance position)
      (sqrt (+ (expt (- (position 'get-x) x) 2) (expt (- (position 'get-y) y) 2))))

    (define (overshooting? position angle speed)
      (let ((next-pos (make-position x y))
            (prev-distance '())
            (next-distance '()))
        ((next-pos 'set-x!) (+ (next-pos 'get-x) (* speed (cos angle))))
        ((next-pos 'set-y!) (+ (next-pos 'get-y) (* speed (sin angle))))
        (set! prev-distance (calculate-distance position))
        (set! next-distance ((next-pos 'calculate-distance) position))
        (display prev-distance)
        (display " <= ")
        (display next-distance)
        (newline)
        (<= prev-distance next-distance)))

    (define (display-position)
      (newline)
      (display "------Position-----")
      (newline)
      (display "x: ")
      (display x)
      (display ", y: ")
      (display y)
      (newline)
      (display "-------------------"))

    (define (display-compare-position position)
      (display "------------Compare----------")
      (newline)
      (display "X: ")
      (display x)
      (display " <-> ")
      (display (position 'get-x))
      (newline)
      (display "Y: ")
      (display y)
      (display " <-> ")
      (display (position 'get-y))
      (newline)
      (display "-----------------------------")
      (newline))

    (define (dispatch mes)
      (cond ((eq? mes 'get-x) x)
            ((eq? mes 'get-y) y)
            ((eq? mes 'set-x!) set-x!)
            ((eq? mes 'set-y!) set-y!)
            ((eq? mes 'equal?) equal?)
            ((eq? mes 'change-coordinates!) change-coordinates!)
            ((eq? mes 'in-area?) in-area?)
            ((eq? mes 'close-enough?) close-enough?)
            ((eq? mes 'outside-playarea?) outside-playarea?)
            ((eq? mes 'display-position) display-position)
            ((eq? mes 'set-distance-num!) set-distance-num!)
            ((eq? mes 'get-distance-num) distance-num)
            ((eq? mes 'display-compare-position) display-compare-position)
            ((eq? mes 'overshooting?) overshooting?)
            ((eq? mes 'calculate-distance) calculate-distance)
            (else (display "Error: Wrong dispatch message (Position.rkt) -> ") (display mes))))
    dispatch))