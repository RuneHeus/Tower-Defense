(#%require "Graphics.rkt")
(load "Position.rkt")
(load "Projectile.rkt")

(define (make-tower position environment)

  (let ((tile (make-tile 50 50 "../images/Towers/tower1.png" "../images/Towers/tower1_mask.png"))
        (area '())
        (cooldown 0)
        (target #f)
        (projectile #f))
  
    (define (set-scale) ;This sets the scale of the tower
      ((tile 'set-scale!) size-factor)
      ((tile 'set-x!) (+ (- (/ (* (tile 'get-w) size-factor) 2) (/ (tile 'get-w) 2)) (position 'get-x)))
      ((tile 'set-y!) (+ (- (/ (* (tile 'get-h) size-factor) 2) (/ (tile 'get-h) 2)) (position 'get-y))))

    (define (generate-area) ;This is called at the making of the tower, and are all the surrounding squares wich makes its area
      (do ((y (- (position 'get-y) (* size-factor 50)) (+ y (* size-factor 50))))
        ((> y (+ (position 'get-y) (* size-factor 50))))
        (do ((x (- (position 'get-x) (* size-factor 50)) (+ x (* size-factor 50))))
          ((> x (+ (position 'get-x) (* size-factor 50))))
          (set! area (append area (list (make-position x y)))))))

    (define (check-area monster)
      (if (or (not target) (eq? monster target));Checks if a monster is in its area or not, it there is a monster in the area but the tower already has a target, than this monster will be ignored
          (let* ((x ((monster 'get-position) 'get-x))
                 (y ((monster 'get-position) 'get-y))
                 (monster-pos (make-position (- x (modulo x (* size-factor 50))) (- y (modulo y (* size-factor 50)))))
                 (change? #f))
            (map (lambda (position)
                   (if ((position 'equal?) monster-pos)
                       (set! change? #t))) area)
            (cond ((and (not target) change?)
                   (set! target monster))
                  ((and (eq? target monster) (not change?))
                   (set! target #f))))))

    (define (remove-target monster)
      (if (eq? monster target)
          (set! target #f)))
    
    (define (shoot!)
      (if target
          (if (= cooldown 0)
              (if projectile
                  ((projectile 'move!)) ;If projectile exists, move it
                  (begin
                    (set-projectile! (make-projectile (make-position (position 'get-x) (position 'get-y)) target dispatch))
                    ((((environment 'draw) 'projectile-layer) 'add-drawable!) (projectile 'get-tile))
                    (set! cooldown 2000)))
              (if projectile
                  ((projectile 'move!))))
          (if projectile
              (set-projectile! #f))))
    
    (define (set-cooldown! num)
      (set! cooldown num))

    (define (set-projectile! value)
      (set! projectile value))
  
    (define (dispatch mes)
      (cond ((eq? mes 'get-tile) tile)
            ((eq? mes 'get-position) position)
            ((eq? mes 'entity?) 'tower);
            ((eq? mes 'check-area) check-area)
            ((eq? mes 'target) target)
            ((eq? mes 'cooldown) cooldown)
            ((eq? mes 'shoot!) shoot!)
            ((eq? mes 'set-cooldown!) set-cooldown!)
            ((eq? mes 'get-projectile) projectile)
            ((eq? mes 'set-projectile!) set-projectile!)
            ((eq? mes 'remove-target) remove-target)))
    (set-scale)
    (generate-area)
    dispatch))