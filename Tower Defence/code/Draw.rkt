(define (make-draw player)
  (let* ((window (make-window width height "Tower Defense" 60))
         (background-layer ((window 'new-layer!)))
         (power-up-layer ((window 'new-layer!)))
         (entity-layer ((window 'new-layer!)))
         (projectile-layer ((window 'new-layer!)))
         (menu-layer ((window 'new-layer!)))
         (menu-item-layer ((window 'new-layer!)))
         (pos-layer ((window 'new-layer!)))
         (text-layer ((window 'new-layer!)))
         (game-over-layer ((window 'new-layer!)))
         (text (make-tile width height))
         (start-text (make-tile width height))
         (wave-text '())
         (wave-count-text '())
         (restart-text '())
         (previous-points '())
         (previous-health '())
         (game-over-tiles '()))
     
    (define (reposition! tile position . offset)
      (if (not (null? offset))
          (begin 
            ((tile 'set-x!) (+ (- (/ (* (tile 'get-w) size-factor) 2) (/ (tile 'get-w) 2)) (- (position 'get-x) (* 50 (car offset)))))
            ((tile 'set-y!) (+ (- (/ (* (tile 'get-h) size-factor) 2) (/ (tile 'get-h) 2)) (- (position 'get-y) (* 50 (car offset))))))
          (begin 
            ((tile 'set-x!) (+ (- (/ (* (tile 'get-w) size-factor) 2) (/ (tile 'get-w) 2)) (position 'get-x)))
            ((tile 'set-y!) (+ (- (/ (* (tile 'get-h) size-factor) 2) (/ (tile 'get-h) 2)) (position 'get-y))))))

    (define (draw! drawable)
      ((entity-layer 'add-drawable!) drawable))

    (define (draw-start-text)
      ((start-text 'draw-text!) "Press: s to start..." (* size-factor 25) (* size-factor 300) (* size-factor 200) "white")
      ((text-layer 'add-drawable!) start-text))

    (define (draw-game-status-text)
      (if (not (null? previous-points))
          ((text-layer 'remove-drawable!) previous-points))
      (if (not (null? previous-health))
          ((text-layer 'remove-drawable!) previous-health))
      (if (not (null? restart-text))
          ((text-layer 'remove-drawable!) restart-text))
      (let ((points-tile (make-tile width height))
            (life-tile (make-tile width height)))
        ((points-tile 'draw-text!) (string-append "Points: " (number->string (player 'get-points))) (* size-factor 15) (* size-factor 650) (* size-factor 50) "black")
        ((life-tile 'draw-text!) (string-append "Health: " (number->string (player 'get-health))) (* size-factor 15) (* size-factor 650) (* size-factor 25) "black")
        (set! restart-text (make-tile width height))
        ((restart-text 'draw-text!) "Press 'space' to restart" (* size-factor 12) (* size-factor 300) (* size-factor 30) "black")
        ((text-layer 'add-drawable!) points-tile)
        ((text-layer 'add-drawable!) life-tile)
        (set! previous-points points-tile)
        (set! previous-health life-tile)))

    (define (remove-start-text!)
      ((text-layer 'remove-drawable!) start-text))

    (define (remove-previous-text!)
      (if (not (null? previous-points))
          (begin ((text-layer 'remove-drawable!) previous-points)
                 (set! previous-points'())))
      (if (not (null? previous-health))
          (begin ((text-layer 'remove-drawable!) previous-health)
                 (set! previous-health'()))))

    (define (remove-game-over-screen!)
      (map (lambda (tile)
             ((game-over-layer 'remove-drawable!) tile))
           game-over-tiles)
      (set! game-over-tiles '()))

    (define (draw-game-over-screen! mes)
      (let ((tile (make-tile width height))
            (game-over-text (make-tile width height))
            (restart-tile (make-tile width height)))
        ((tile 'draw-rectangle!) 0 0 width height "black")
        ((game-over-text 'draw-text!) (string-append "Game Over!: " mes) (* size-factor 30) (* size-factor 300) (* size-factor 200) "white")
        ((restart-tile 'draw-text!) "Press S to restart.." (* size-factor 20) (* size-factor 300) (* size-factor 250) "white")
        ((game-over-layer 'add-drawable!) game-over-text)
        ((game-over-layer 'add-drawable!) restart-tile)
        ((game-over-layer 'add-drawable!) tile)
        (set! game-over-tiles (add-element-to-list tile game-over-tiles))
        (set! game-over-tiles (add-element-to-list game-over-text game-over-tiles))
        (set! game-over-tiles (add-element-to-list restart-tile game-over-tiles))))
    
    (define (draw-world!)
      (let ((tile (make-tile width height "../images/World/World.png")))
        ((background-layer 'add-drawable!) tile)
        (draw-menu!)))

    (define (draw-menu!)
      (map (lambda (element)
             ((menu-item-layer 'add-drawable!) (element 'get-tile)))
           menu-list)
      (map (lambda (text)
             ((menu-layer 'add-drawable!) text))
           menu-cost)
      (let ((tile (make-tile width height))
            (tower-text (make-tile width height)))
        ((tile 'draw-rectangle!) (* 600 size-factor) (* 100 size-factor) (* 700 size-factor) (* 300 size-factor) "brown")
        ((tower-text 'draw-text!) "Towers" (* size-factor 20) (* size-factor 650) (* size-factor 100) "white")
        ((tower-text 'draw-text!) "Power-Ups" (* size-factor 17) (* size-factor 650) (* size-factor 250) "white")
        ((menu-layer 'add-drawable!) tower-text)
        ((menu-layer 'add-drawable!) tile)))

    (define (add-portal-opacity!)
      ((menu-item-layer 'remove-drawable!) (portal 'get-tile))
      ((portal 'set-tile!) (make-tile image-size image-size portal-img-50 portal-mask-50))
      (reposition! (portal 'get-tile) portal-pos)
      ((menu-item-layer 'add-drawable!) (portal 'get-tile)))

    (define (remove-portal-opacity!)
      ((menu-item-layer 'remove-drawable!) (portal 'get-tile))
      ((portal 'set-tile!) (make-tile image-size image-size portal-img portal-mask))
      (reposition! (portal 'get-tile) portal-pos)
      ((menu-item-layer 'add-drawable!) (portal 'get-tile)))

    (define (add-bomb-opacity!)
      ((menu-item-layer 'remove-drawable!) (bomb 'get-tile))
      ((bomb 'set-tile!) (make-tile image-size image-size bomb-img-50 bomb-mask-50))
      (reposition! (bomb 'get-tile) bomb-pos)
      ((menu-item-layer 'add-drawable!) (bomb 'get-tile)))

    (define (remove-bomb-opacity!)
      ((menu-item-layer 'remove-drawable!) (bomb 'get-tile))
      ((bomb 'set-tile!) (make-tile image-size image-size bomb-img bomb-mask))
      (reposition! (bomb 'get-tile) bomb-pos)
      ((menu-item-layer 'add-drawable!) (bomb 'get-tile)))

    (define (reset! first?)
      (remove-game-over-screen!)
      (remove-previous-text!)
      (remove-start-text!)
      (if (not first?)
          (begin (remove-portal-opacity!)
                 (remove-bomb-opacity!))
          (draw-world!))
      (remove-wave-text!)
      (draw-game-status-text))

    (define (update-wave-count! count)
      (if (not (null? wave-count-text))
          ((text-layer 'remove-drawable!) wave-count-text))
      (set! wave-count-text (make-tile width height))
      ((wave-count-text 'draw-text!) (string-append "Wave: " (number->string count)) (* size-factor 15) (* size-factor 500) (* size-factor 25) "black")
      ((text-layer 'add-drawable!) wave-count-text))

    (define (remove-wave-count!)
      (if (not (null? wave-count-text))
          ((text-layer 'remove-drawable!) wave-count-text)))

    (define (draw-wave-text!)
      (set! wave-text (make-tile width height))
      ((wave-text 'draw-text!) "Press 'w' to start wave" (* size-factor 15) (* size-factor 125) (* size-factor 25) "black")
      ((text-layer 'add-drawable!) wave-text))

    (define (remove-wave-text!)
      (if (not (null? wave-text))
          ((text-layer 'remove-drawable!) wave-text)
          (set! wave-text '())))

    (define (dispatch mes)
      (cond ((eq? mes 'draw!) draw!)
            ((eq? mes 'reposition!) reposition!)
            ((eq? mes 'draw-world!) (draw-world!))
            ((eq? mes 'get-window) window)
            ((eq? mes 'entity-layer) entity-layer)
            ((eq? mes 'tower-layer) tower-layer)
            ((eq? mes 'projectile-layer) projectile-layer)
            ((eq? mes 'get-background-layer) background-layer)
            ((eq? mes 'draw-start-text) draw-start-text)
            ((eq? mes 'get-start-text) start-text)
            ((eq? mes 'get-text-layer) text-layer)
            ((eq? mes 'draw-game-status-text) draw-game-status-text)
            ((eq? mes 'remove-start-text!) remove-start-text!)
            ((eq? mes 'empty-used-tiles!) empty-used-tiles!)
            ((eq? mes 'remove-all-text!) remove-all-text!)
            ((eq? mes 'remove-previous-text!) remove-previous-text!)
            ((eq? mes 'draw-game-over-screen!) draw-game-over-screen!)
            ((eq? mes 'remove-game-over-screen!) remove-game-over-screen!)
            ((eq? mes 'get-power-up-layer) power-up-layer)
            ((eq? mes 'add-portal-opacity!) add-portal-opacity!)
            ((eq? mes 'remove-portal-opacity!) remove-portal-opacity!)
            ((eq? mes 'add-bomb-opacity!) add-bomb-opacity!)
            ((eq? mes 'remove-bomb-opacity!) remove-bomb-opacity!)
            ((eq? mes 'reset!) reset!)
            ((eq? mes 'draw-wave-text!) draw-wave-text!)
            ((eq? mes 'remove-wave-text!) remove-wave-text!)
            ((eq? mes 'update-wave-count!) update-wave-count!)
            ((eq? mes 'remove-wave-count!) remove-wave-count!)
            (else (display "Error: Wrong dispatch message (Draw.rkt) ") (display mes))))
    dispatch))