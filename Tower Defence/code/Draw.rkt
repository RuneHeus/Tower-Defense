(define (make-draw player)
  (let* ((window (make-window width height "Tower Defense" 60))
         (background-layer ((window 'new-layer!)))
         (entity-layer ((window 'new-layer!)))
         (projectile-layer ((window 'new-layer!)))
         (menu-layer ((window 'new-layer!)))
         (pos-layer ((window 'new-layer!)))
         (text-layer ((window 'new-layer!)))
         (game-over-layer ((window 'new-layer!)))
         (text (make-tile width height))
         (start-text (make-tile width height))
         (restart-text '())
         (previous-points '())
         (previous-health '())
         (game-over-tiles '()))
     
    (define (reposition! tile position)
      ((tile 'set-x!) (+ (- (/ (* (tile 'get-w) size-factor) 2) (/ (tile 'get-w) 2)) (position 'get-x)))
      ((tile 'set-y!) (+ (- (/ (* (tile 'get-h) size-factor) 2) (/ (tile 'get-h) 2)) (position 'get-y))))

    (define (draw! drawable)
      ((entity-layer 'add-drawable!) drawable))

    (define (draw-start-text)
      ((start-text 'draw-text!) "Press: s to start..." (* size-factor 25) (* size-factor 300) (* size-factor 200) "white")
      ((text-layer 'add-drawable!) start-text))

    (define (draw-game-status-text)
      (if (not (null? previous-points))
          ((text-layer 'remove-drawable!) previous-points))
      (if (not (null? previous-health))
          ((text-layer 'remove-drawable!) previous-health))
      (if (not (null? restart-text))
          ((text-layer 'remove-drawable!) restart-text))
      (let ((points-tile (make-tile width height))
            (life-tile (make-tile width height)))
        ((points-tile 'draw-text!) (string-append "Points: " (number->string (player 'get-points))) (* size-factor 15) (* size-factor 650) (* size-factor 50) "black")
        ((life-tile 'draw-text!) (string-append "Health: " (number->string (player 'get-health))) (* size-factor 15) (* size-factor 500) (* size-factor 50) "black")
        (set! restart-text (make-tile width height))
        ((restart-text 'draw-text!) "Press 'space' to restart" (* size-factor 12) (* size-factor 300) (* size-factor 30) "black")
        ((text-layer 'add-drawable!) points-tile)
        ((text-layer 'add-drawable!) life-tile)
        (set! previous-points points-tile)
        (set! previous-health life-tile)))

    (define (remove-start-text!)
      ((text-layer 'remove-drawable!) start-text))

    (define (remove-previous-text!)
      (if (not (null? previous-points))
          (begin ((text-layer 'remove-drawable!) previous-points)
                 (set! previous-points'())))
      (if (not (null? previous-health))
          (begin ((text-layer 'remove-drawable!) previous-health)
                 (set! previous-health'()))))

    (define (remove-game-over-screen!)
      (map (lambda (tile)
             ((game-over-layer 'remove-drawable!) tile))
           game-over-tiles)
      (set! game-over-tiles '()))

    (define (draw-game-over-screen!)
      (let ((tile (make-tile width height))
            (game-over-text (make-tile width height))
            (restart-tile (make-tile width height)))
        ((tile 'draw-rectangle!) 0 0 width height "black")
        ((game-over-text 'draw-text!) "Game Over!" (* size-factor 30) (* size-factor 300) (* size-factor 200) "white")
        ((restart-tile 'draw-text!) "Press S to restart.." (* size-factor 20) (* size-factor 300) (* size-factor 250) "white")
        ((game-over-layer 'add-drawable!) game-over-text)
        ((game-over-layer 'add-drawable!) restart-tile)
        ((game-over-layer 'add-drawable!) tile)
        (set! game-over-tiles (add-element-to-list tile game-over-tiles))
        (set! game-over-tiles (add-element-to-list game-over-text game-over-tiles))
        (set! game-over-tiles (add-element-to-list restart-tile game-over-tiles))))
    
    (define (draw-world!)
      (let ((tile (make-tile width height)))
        ((tile 'draw-rectangle!) 0 0 width height "green")
        ((tile 'draw-rectangle!) (start-position 'get-x) (start-position 'get-y) (* 300 size-factor) (* 50 size-factor) "brown") ;Pad ((0,5) -> (15,5)) (division)
        ((tile 'draw-rectangle!) (* 300 size-factor) (* 100 size-factor) (* size-factor 50) (* 400 size-factor) "brown") ;Pad ((15,5) -> (15,35)) (division)
        ((tile 'draw-rectangle!) (* size-factor 300) (* size-factor 500) (* 500 size-factor)  (* 50 size-factor) "brown") ;Pad ((15,35) -> (40,35)) (division)
        ((background-layer 'add-drawable!) tile)
        ((text-layer 'add-drawable!) restart-text)
        (define (draw-stripes-horizontal!)
          (let loop ((pos-tile (make-tile width height))
                     (y 0))
            (cond ((> y height) ((pos-layer 'add-drawable!) pos-tile))
                  (else
                   (begin
                     ((pos-tile 'draw-line!) 0 y width y 1 "black")
                     (loop pos-tile (+ y (* 50 size-factor))))))))
              
        (define (draw-stripes-vertical!)
          (let loop ((pos-tile (make-tile width height))
                     (x 0))
            (cond ((> x width) ((pos-layer 'add-drawable!) pos-tile))
                  (else
                   (begin
                     ((pos-tile 'draw-line!) x 0 x height 1 "black")
                     (loop pos-tile (+ x (* 50 size-factor))))))))         
        (draw-stripes-horizontal!)
        (draw-stripes-vertical!)
        (draw-menu!)))

    (define (draw-menu!)
      (map (lambda (element)
             ((menu-layer 'add-drawable!) (element 'get-tile)))
           menu-list)
      (map (lambda (text)
             ((menu-layer 'add-drawable!) text))
           menu-cost)
      (let ((tile (make-tile width height))
            (tower-text (make-tile width height)))
        ((tile 'draw-rectangle!) (* 600 size-factor) (* 100 size-factor) (* 700 size-factor) (* 300 size-factor) "brown")
        ((tower-text 'draw-text!) "Towers" (* size-factor 20) (* size-factor 650) (* size-factor 100) "white")
        ((tower-text 'draw-text!) "Power-Ups" (* size-factor 17) (* size-factor 650) (* size-factor 250) "white")
        ((menu-layer 'add-drawable!) tower-text)
        ((menu-layer 'add-drawable!) tile)))


    (define (dispatch mes)
      (cond ((eq? mes 'draw!) draw!)
            ((eq? mes 'reposition!) reposition!)
            ((eq? mes 'draw-world!) (draw-world!))
            ((eq? mes 'get-window) window)
            ((eq? mes 'entity-layer) entity-layer)
            ((eq? mes 'tower-layer) tower-layer)
            ((eq? mes 'projectile-layer) projectile-layer)
            ((eq? mes 'get-background-layer) background-layer)
            ((eq? mes 'draw-start-text) draw-start-text)
            ((eq? mes 'get-start-text) start-text)
            ((eq? mes 'get-text-layer) text-layer)
            ((eq? mes 'draw-game-status-text) draw-game-status-text)
            ((eq? mes 'remove-start-text!) remove-start-text!)
            ((eq? mes 'empty-used-tiles!) empty-used-tiles!)
            ((eq? mes 'remove-all-text!) remove-all-text!)
            ((eq? mes 'remove-previous-text!) remove-previous-text!)
            ((eq? mes 'draw-game-over-screen!) draw-game-over-screen!)
            ((eq? mes 'remove-game-over-screen!) remove-game-over-screen!)
            (else (display "Error: Wrong dispatch message (Draw.rkt) ") (display mes))))
    dispatch))