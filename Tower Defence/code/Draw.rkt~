(define (make-draw player)
  (let* ((window (make-window width height "Tower Defense" 60))
         (background-layer ((window 'new-layer!)))
         (entity-layer ((window 'new-layer!)))
         (projectile-layer ((window 'new-layer!)))
         (text-layer ((window 'new-layer!)))
         (text (make-tile width height))
         (start-text (make-tile width height)))
    
    (define (reposition! tile position)
      ((tile 'set-x!) (+ (- (/ (* (tile 'get-w) size-factor) 2) (/ (tile 'get-w) 2)) (position 'get-x)))
      ((tile 'set-y!) (+ (- (/ (* (tile 'get-h) size-factor) 2) (/ (tile 'get-h) 2)) (position 'get-y))))

    (define (update-game-status!)
      ((text-layer 'remove-drawable!) text)
      (text 'clear!)
      ((text 'draw-text!) (string-append "Points: " (number->string (player 'get-points))) (* size-factor 10) (* size-factor 700) (* size-factor 100) "black")
      ((text-layer 'add-drawable!) text))

    (define (draw! drawable)
      ((entity-layer 'add-drawable!) drawable))

    (define (draw-start-text)
      ((start-text 'draw-text!) "Press: s to start..." (* size-factor 25) (* size-factor 300) (* size-factor 200) "white")
      ((text-layer 'add-drawable!) start-text))

    (define (draw-game-status-text)
      ((text 'draw-text!) (string-append "Points: " (number->string (player 'get-points))) (* size-factor 10) (* size-factor 700) (* size-factor 100) "black")
      ((text-layer 'add-drawable!) text))

    (define (remove-start-text!)
      (text-layer 'remove-drawable!) start-text)
    
    (define (draw-world!)
      (let ((tile (make-tile width height))
            (restart-text (make-tile width height)))
        ((tile 'draw-rectangle!) 0 0 width height "green")
        ((tile 'draw-rectangle!) (start-position 'get-x) (start-position 'get-y) (* 300 size-factor) (* 50 size-factor) "brown") ;Pad ((0,5) -> (15,5)) (division)
        ((tile 'draw-rectangle!) (* 300 size-factor) (* 100 size-factor) (* size-factor 50) (* 400 size-factor) "brown") ;Pad ((15,5) -> (15,35)) (division)
        ((tile 'draw-rectangle!) (* size-factor 300) (* size-factor 500) (* 500 size-factor)  (* 50 size-factor) "brown") ;Pad ((15,35) -> (40,35)) (division)
        ((background-layer 'add-drawable!) tile)
        ((restart-text 'draw-text!) "Press 'space' to restart" (* size-factor 12) (* size-factor 600) (* size-factor 50) "black")
        ((text-layer 'add-drawable!) restart-text))
      ;    (define (draw-stripes-horizontal!)
      ;      (let loop ((pos-tile (make-tile width height))
      ;                 (y 0))
      ;        (cond ((> y height) ((pos-layer 'add-drawable!) pos-tile))
      ;              (else
      ;               (begin
      ;                 ((pos-tile 'draw-line!) 0 y width y 1 "black")
      ;                 (loop pos-tile (+ y (* 50 size-factor))))))))
      ;
      ;    (define (draw-stripes-vertical!)
      ;      (let loop ((pos-tile (make-tile width height))
      ;                 (x 0))
      ;        (cond ((> x width) ((pos-layer 'add-drawable!) pos-tile))
      ;              (else
      ;               (begin
      ;                 ((pos-tile 'draw-line!) x 0 x height 1 "black")
      ;                 (loop pos-tile (+ x (* 50 size-factor))))))))
      ;                                      
      ;    (draw-stripes-horizontal!)
      ;    (draw-stripes-vertical!)
      )

    (define (dispatch mes)
      (cond ((eq? mes 'draw!) draw!)
            ((eq? mes 'reposition!) reposition!)
            ((eq? mes 'draw-world!) (draw-world!))
            ((eq? mes 'get-window) window)
            ((eq? mes 'entity-layer) entity-layer)
            ((eq? mes 'tower-layer) tower-layer)
            ((eq? mes 'projectile-layer) projectile-layer)
            ((eq? mes 'get-background-layer) background-layer)
            ((eq? mes 'draw-start-text) draw-start-text)
            ((eq? mes 'get-start-text) start-text)
            ((eq? mes 'get-text-layer) text-layer)
            ((eq? mes 'draw-game-status-text) draw-game-status-text)
            ((eq? mes 'update-game-status!) update-game-status!)
            ((eq? mes 'remove-start-text!) remove-start-text!)
            (else (display "Error: Wrong dispatch message (Draw.rkt) ") (display mes))))
    dispatch))